exports[`Webpack loader with a loader query of \`?\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=false\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false&passElementProps=true\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=false\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=false\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    _react2.default.createElement(
      \'ul\',
      elementProps[\'ul\'],
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        _react2.default.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true&passElementProps=true\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?implicitlyImportReact=true\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=false\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    _react2.default.createElement(
      \'ul\',
      elementProps[\'ul\'],
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        _react2.default.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a loader query of \`?passElementProps=true\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"div\",
      { className: \"my-container-class\" },
      React.createElement(
        \"ul\",
        null,
        React.createElement(
          \"li\",
          null,
          React.createElement(
            \"a\",
            { href: \"#test-document\" },
            \"Test Document\"
          ),
          React.createElement(
            \"ul\",
            null,
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#basic-markdown-template\" },
                \"Basic Markdown Template\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-no-interpolations\" },
                \"Here\'s a code snippet with no interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
                \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-paragraph-with-a-simple-interpolation\" },
                \"Here\'s a paragraph with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-a-simple-interpolation\" },
                \"Here\'s a code snippet with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-code-snippet\" },
                \"Here\'s an unhinted code snippet\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-snippet-with-no-discernible-language\" },
                \"Here\'s an unhinted snippet with no discernible language\"
              )
            )
          )
        )
      )
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"div\",
      { className: \"my-container-class\" },
      React.createElement(
        \"ul\",
        null,
        React.createElement(
          \"li\",
          null,
          React.createElement(
            \"a\",
            { href: \"#test-document\" },
            \"Test Document\"
          ),
          React.createElement(
            \"ul\",
            null,
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#basic-markdown-template\" },
                \"Basic Markdown Template\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-no-interpolations\" },
                \"Here\'s a code snippet with no interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
                \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-paragraph-with-a-simple-interpolation\" },
                \"Here\'s a paragraph with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-a-simple-interpolation\" },
                \"Here\'s a code snippet with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-code-snippet\" },
                \"Here\'s an unhinted code snippet\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-snippet-with-no-discernible-language\" },
                \"Here\'s an unhinted snippet with no discernible language\"
              )
            )
          )
        )
      )
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'test-document\' }),
      \'Test Document\'
    ),
    React.createElement(\'p\', elementProps[\'p\']),
    React.createElement(
      \'div\',
      _extends({}, elementProps[\'div\'], { className: \'my-container-class\' }),
      React.createElement(
        \'ul\',
        elementProps[\'ul\'],
        React.createElement(
          \'li\',
          elementProps[\'li\'],
          React.createElement(
            \'a\',
            _extends({}, elementProps[\'a\'], { href: \'#test-document\' }),
            \'Test Document\'
          ),
          React.createElement(
            \'ul\',
            elementProps[\'ul\'],
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#basic-markdown-template\' }),
                \'Basic Markdown Template\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-no-interpolations\' }),
                \'Here\\\'s a code snippet with no interpolations\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
                \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-paragraph-with-a-simple-interpolation\' }),
                \'Here\\\'s a paragraph with a simple interpolation\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-a-simple-interpolation\' }),
                \'Here\\\'s a code snippet with a simple interpolation\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-an-unhinted-code-snippet\' }),
                \'Here\\\'s an unhinted code snippet\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-an-unhinted-snippet-with-no-discernible-language\' }),
                \'Here\\\'s an unhinted snippet with no discernible language\'
              )
            )
          )
        )
      )
    ),
    React.createElement(\'p\', elementProps[\'p\']),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'basic-markdown-template\' }),
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-no-interpolations\' }),
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-paragraph-with-a-simple-interpolation\' }),
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-a-simple-interpolation\' }),
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-code-snippet\' }),
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-snippet-with-no-discernible-language\' }),
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']} /><div {...elementProps[\'div\']} className=\"my-container-class\"><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#test-document\">Test Document</a><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p {...elementProps[\'p\']} />
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-imports-and-interpolations\' }),
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-static-attributes\' }),
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'test-document\' }),
      \'Test Document\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'basic-markdown-template\' }),
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-no-interpolations\' }),
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-paragraph-with-a-simple-interpolation\' }),
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-a-simple-interpolation\' }),
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-code-snippet\' }),
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-snippet-with-no-discernible-language\' }),
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-imports-and-interpolations\' }),
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-static-attributes\' }),
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":false}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    _react2.default.createElement(\"p\", null),
    _react2.default.createElement(
      \"div\",
      { className: \"my-container-class\" },
      _react2.default.createElement(
        \"ul\",
        null,
        _react2.default.createElement(
          \"li\",
          null,
          _react2.default.createElement(
            \"a\",
            { href: \"#test-document\" },
            \"Test Document\"
          ),
          _react2.default.createElement(
            \"ul\",
            null,
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#basic-markdown-template\" },
                \"Basic Markdown Template\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-no-interpolations\" },
                \"Here\'s a code snippet with no interpolations\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
                \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-paragraph-with-a-simple-interpolation\" },
                \"Here\'s a paragraph with a simple interpolation\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-a-simple-interpolation\" },
                \"Here\'s a code snippet with a simple interpolation\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-code-snippet\" },
                \"Here\'s an unhinted code snippet\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-snippet-with-no-discernible-language\" },
                \"Here\'s an unhinted snippet with no discernible language\"
              )
            )
          )
        )
      )
    ),
    _react2.default.createElement(\"p\", null),
    _react2.default.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    _react2.default.createElement(\"p\", null),
    _react2.default.createElement(
      \"div\",
      { className: \"my-container-class\" },
      _react2.default.createElement(
        \"ul\",
        null,
        _react2.default.createElement(
          \"li\",
          null,
          _react2.default.createElement(
            \"a\",
            { href: \"#test-document\" },
            \"Test Document\"
          ),
          _react2.default.createElement(
            \"ul\",
            null,
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#basic-markdown-template\" },
                \"Basic Markdown Template\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-no-interpolations\" },
                \"Here\'s a code snippet with no interpolations\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
                \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-paragraph-with-a-simple-interpolation\" },
                \"Here\'s a paragraph with a simple interpolation\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-a-simple-interpolation\" },
                \"Here\'s a code snippet with a simple interpolation\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-code-snippet\" },
                \"Here\'s an unhinted code snippet\"
              )
            ),
            _react2.default.createElement(
              \"li\",
              null,
              _react2.default.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-snippet-with-no-discernible-language\" },
                \"Here\'s an unhinted snippet with no discernible language\"
              )
            )
          )
        )
      )
    ),
    _react2.default.createElement(\"p\", null),
    _react2.default.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    _react2.default.createElement(
      \'ul\',
      elementProps[\'ul\'],
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        _react2.default.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'test-document\' }),
      \'Test Document\'
    ),
    _react2.default.createElement(\'p\', elementProps[\'p\']),
    _react2.default.createElement(
      \'div\',
      _extends({}, elementProps[\'div\'], { className: \'my-container-class\' }),
      _react2.default.createElement(
        \'ul\',
        elementProps[\'ul\'],
        _react2.default.createElement(
          \'li\',
          elementProps[\'li\'],
          _react2.default.createElement(
            \'a\',
            _extends({}, elementProps[\'a\'], { href: \'#test-document\' }),
            \'Test Document\'
          ),
          _react2.default.createElement(
            \'ul\',
            elementProps[\'ul\'],
            _react2.default.createElement(
              \'li\',
              elementProps[\'li\'],
              _react2.default.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#basic-markdown-template\' }),
                \'Basic Markdown Template\'
              )
            ),
            _react2.default.createElement(
              \'li\',
              elementProps[\'li\'],
              _react2.default.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-no-interpolations\' }),
                \'Here\\\'s a code snippet with no interpolations\'
              )
            ),
            _react2.default.createElement(
              \'li\',
              elementProps[\'li\'],
              _react2.default.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
                \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
              )
            ),
            _react2.default.createElement(
              \'li\',
              elementProps[\'li\'],
              _react2.default.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-paragraph-with-a-simple-interpolation\' }),
                \'Here\\\'s a paragraph with a simple interpolation\'
              )
            ),
            _react2.default.createElement(
              \'li\',
              elementProps[\'li\'],
              _react2.default.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-a-simple-interpolation\' }),
                \'Here\\\'s a code snippet with a simple interpolation\'
              )
            ),
            _react2.default.createElement(
              \'li\',
              elementProps[\'li\'],
              _react2.default.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-an-unhinted-code-snippet\' }),
                \'Here\\\'s an unhinted code snippet\'
              )
            ),
            _react2.default.createElement(
              \'li\',
              elementProps[\'li\'],
              _react2.default.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-an-unhinted-snippet-with-no-discernible-language\' }),
                \'Here\\\'s an unhinted snippet with no discernible language\'
              )
            )
          )
        )
      )
    ),
    _react2.default.createElement(\'p\', elementProps[\'p\']),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'basic-markdown-template\' }),
      \'Basic Markdown Template\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    _react2.default.createElement(
      \'ul\',
      elementProps[\'ul\'],
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-no-interpolations\' }),
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-paragraph-with-a-simple-interpolation\' }),
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-a-simple-interpolation\' }),
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-code-snippet\' }),
      \'Here\\\'s an unhinted code snippet\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-snippet-with-no-discernible-language\' }),
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']} /><div {...elementProps[\'div\']} className=\"my-container-class\"><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#test-document\">Test Document</a><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p {...elementProps[\'p\']} />
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-imports-and-interpolations\' }),
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        _react2.default.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-static-attributes\' }),
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'test-document\' }),
      \'Test Document\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'basic-markdown-template\' }),
      \'Basic Markdown Template\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    _react2.default.createElement(
      \'ul\',
      elementProps[\'ul\'],
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-no-interpolations\' }),
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-paragraph-with-a-simple-interpolation\' }),
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-a-simple-interpolation\' }),
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-code-snippet\' }),
      \'Here\\\'s an unhinted code snippet\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-snippet-with-no-discernible-language\' }),
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-imports-and-interpolations\' }),
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        _react2.default.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-static-attributes\' }),
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    _react2.default.createElement(
      \'ul\',
      elementProps[\'ul\'],
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      _react2.default.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    _react2.default.createElement(
      \'pre\',
      elementProps[\'pre\'],
      _react2.default.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          _react2.default.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        _react2.default.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        _react2.default.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        _react2.default.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        _react2.default.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object,
  elementProps: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      _react2.default.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    _react2.default.createElement(
      \"ul\",
      null,
      _react2.default.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      _react2.default.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        null,
        \")\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        _react2.default.createElement(\"br\", null)
      )
    ),
    _react2.default.createElement(
      \"pre\",
      null,
      _react2.default.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        _react2.default.createElement(\"br\", null),
        \"brew install --token=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        _react2.default.createElement(\"br\", null),
        \"\\n\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-function\" },
          _react2.default.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        _react2.default.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        _react2.default.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        _react2.default.createElement(\"br\", null),
        \"}\",
        _react2.default.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This is a \',
      _react2.default.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      _react2.default.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      _react2.default.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      _react2.default.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        _react2.default.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \'div\',
    { className: className, style: style },
    _react2.default.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    _react2.default.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 3 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\'react\');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(\'div\', { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _react = require(\"react\");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
}; // Module generated from Markdown by markdown-component-loader v0.0.5


function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return _react2.default.createElement(
    \"div\",
    { className: className, style: style },
    _react2.default.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      _react2.default.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"implicitlyImportReact":true}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import React from \'react\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"div\",
      { className: \"my-container-class\" },
      React.createElement(
        \"ul\",
        null,
        React.createElement(
          \"li\",
          null,
          React.createElement(
            \"a\",
            { href: \"#test-document\" },
            \"Test Document\"
          ),
          React.createElement(
            \"ul\",
            null,
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#basic-markdown-template\" },
                \"Basic Markdown Template\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-no-interpolations\" },
                \"Here\'s a code snippet with no interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
                \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-paragraph-with-a-simple-interpolation\" },
                \"Here\'s a paragraph with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-a-simple-interpolation\" },
                \"Here\'s a code snippet with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-code-snippet\" },
                \"Here\'s an unhinted code snippet\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-snippet-with-no-discernible-language\" },
                \"Here\'s an unhinted snippet with no discernible language\"
              )
            )
          )
        )
      )
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"div\",
      { className: \"my-container-class\" },
      React.createElement(
        \"ul\",
        null,
        React.createElement(
          \"li\",
          null,
          React.createElement(
            \"a\",
            { href: \"#test-document\" },
            \"Test Document\"
          ),
          React.createElement(
            \"ul\",
            null,
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#basic-markdown-template\" },
                \"Basic Markdown Template\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-no-interpolations\" },
                \"Here\'s a code snippet with no interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
                \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-paragraph-with-a-simple-interpolation\" },
                \"Here\'s a paragraph with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-a-code-snippet-with-a-simple-interpolation\" },
                \"Here\'s a code snippet with a simple interpolation\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-code-snippet\" },
                \"Here\'s an unhinted code snippet\"
              )
            ),
            React.createElement(
              \"li\",
              null,
              React.createElement(
                \"a\",
                { href: \"#heres-an-unhinted-snippet-with-no-discernible-language\" },
                \"Here\'s an unhinted snippet with no discernible language\"
              )
            )
          )
        )
      )
    ),
    React.createElement(\"p\", null),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p /><div className=\"my-container-class\"><ul><li><a href=\"#test-document\">Test Document</a><ul><li><a href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li><a href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li><a href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li><a href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li><a href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li><a href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li><a href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p />
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      { id: \"test-document\" },
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      { id: \"basic-markdown-template\" },
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-no-interpolations\" },
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\" },
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-paragraph-with-a-simple-interpolation\" },
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-a-code-snippet-with-a-simple-interpolation\" },
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-code-snippet\" },
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      { id: \"heres-an-unhinted-snippet-with-no-discernible-language\" },
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"test-document\">Test Document</h1>
      <p>[[toc]]</p>
      <h2 id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2 id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2 id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2 id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2 id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-imports-and-interpolations\' },
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      { id: \'markdown-template-with-static-attributes\' },
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1 id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":false}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'test-document\' }),
      \'Test Document\'
    ),
    React.createElement(\'p\', elementProps[\'p\']),
    React.createElement(
      \'div\',
      _extends({}, elementProps[\'div\'], { className: \'my-container-class\' }),
      React.createElement(
        \'ul\',
        elementProps[\'ul\'],
        React.createElement(
          \'li\',
          elementProps[\'li\'],
          React.createElement(
            \'a\',
            _extends({}, elementProps[\'a\'], { href: \'#test-document\' }),
            \'Test Document\'
          ),
          React.createElement(
            \'ul\',
            elementProps[\'ul\'],
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#basic-markdown-template\' }),
                \'Basic Markdown Template\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-no-interpolations\' }),
                \'Here\\\'s a code snippet with no interpolations\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
                \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-paragraph-with-a-simple-interpolation\' }),
                \'Here\\\'s a paragraph with a simple interpolation\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-a-code-snippet-with-a-simple-interpolation\' }),
                \'Here\\\'s a code snippet with a simple interpolation\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-an-unhinted-code-snippet\' }),
                \'Here\\\'s an unhinted code snippet\'
              )
            ),
            React.createElement(
              \'li\',
              elementProps[\'li\'],
              React.createElement(
                \'a\',
                _extends({}, elementProps[\'a\'], { href: \'#heres-an-unhinted-snippet-with-no-discernible-language\' }),
                \'Here\\\'s an unhinted snippet with no discernible language\'
              )
            )
          )
        )
      )
    ),
    React.createElement(\'p\', elementProps[\'p\']),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'basic-markdown-template\' }),
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-no-interpolations\' }),
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-paragraph-with-a-simple-interpolation\' }),
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-a-simple-interpolation\' }),
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-code-snippet\' }),
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-snippet-with-no-discernible-language\' }),
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p />
  <div
    className="my-container-class">
    <ul>
      <li>
        <a
          href="#test-document">
          Test Document
        </a>
        <ul>
          <li>
            <a
              href="#basic-markdown-template">
              Basic Markdown Template
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-no-interpolations">
              Here\'s a code snippet with no interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
              Here\'s a code snippet with things which shouldn\'t be treated as interpolations
            </a>
          </li>
          <li>
            <a
              href="#heres-a-paragraph-with-a-simple-interpolation">
              Here\'s a paragraph with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-a-code-snippet-with-a-simple-interpolation">
              Here\'s a code snippet with a simple interpolation
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-code-snippet">
              Here\'s an unhinted code snippet
            </a>
          </li>
          <li>
            <a
              href="#heres-an-unhinted-snippet-with-no-discernible-language">
              Here\'s an unhinted snippet with no discernible language
            </a>
          </li>
        </ul>
      </li>
    </ul>
  </div>
  <p />
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']} /><div {...elementProps[\'div\']} className=\"my-container-class\"><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#test-document\">Test Document</a><ul {...elementProps[\'ul\']}><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#basic-markdown-template\">Basic Markdown Template</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</a></li><li {...elementProps[\'li\']}><a {...elementProps[\'a\']} href=\"#heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</a></li></ul></li></ul></div><p {...elementProps[\'p\']} />
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-imports-and-interpolations\' }),
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-static-attributes\' }),
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'test-document\' }),
      \'Test Document\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'basic-markdown-template\' }),
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-no-interpolations\' }),
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\' }),
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-paragraph-with-a-simple-interpolation\' }),
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-a-code-snippet-with-a-simple-interpolation\' }),
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-code-snippet\' }),
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      _extends({}, elementProps[\'h2\'], { id: \'heres-an-unhinted-snippet-with-no-discernible-language\' }),
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="test-document">
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template">
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-code-snippet-with-no-interpolations">
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations">
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation">
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation">
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet">
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language">
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"test-document\">Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']} id=\"basic-markdown-template\">Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-no-interpolations\">Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations\">Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-paragraph-with-a-simple-interpolation\">Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']} id=\"heres-a-code-snippet-with-a-simple-interpolation\">Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-code-snippet\">Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']} id=\"heres-an-unhinted-snippet-with-no-discernible-language\">Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-imports-and-interpolations\' }),
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-imports-and-interpolations">
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-imports-and-interpolations\">Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      _extends({}, elementProps[\'h1\'], { id: \'markdown-template-with-static-attributes\' }),
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1
    id="markdown-template-with-static-attributes">
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']} id=\"markdown-template-with-static-attributes\">Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 0 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Test Document\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'[[toc]]\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Basic Markdown Template\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a basic Markdown template, with no interpolations going on.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This should be\'
    ),
    React.createElement(
      \'ul\',
      elementProps[\'ul\'],
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'easy and;\'
      ),
      React.createElement(
        \'li\',
        elementProps[\'li\'],
        \'predictable!\'
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with no interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'npm install -g yarn\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with things which shouldn\\\'t be treated as interpolations\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=blah\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a paragraph with a simple interpolation\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'There are \',
      Object.keys(props).length,
      \' props being supplied to this component.\'
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s a code snippet with a simple interpolation\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'function\'
        ),
        \' \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'rbenv\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'RUBY=\',
        props.rubycontent,
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted code snippet\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' quick brown fox jumps over \',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-keyword\' }),
          \'the\'
        ),
        \' lazy dog\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'h2\',
      elementProps[\'h2\'],
      \'Here\\\'s an unhinted snippet with no discernible language\'
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \')\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'()\'
        ),
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-comment\' }),
          \'(()\'
        ),
        \')\',
        React.createElement(\'br\', elementProps[\'br\'])
      )
    ),
    React.createElement(
      \'pre\',
      elementProps[\'pre\'],
      React.createElement(
        \'code\',
        _extends({}, elementProps[\'code\'], { className: \'language-bash\' }),
        \'brew tap buildkite/buildkite\',
        React.createElement(\'br\', elementProps[\'br\']),
        \'brew install --token=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\\\'\',
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \'\\\'\'
        ),
        \' buildkite-agent\',
        React.createElement(\'br\', elementProps[\'br\']),
        \"\\n\",
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-function\' }),
          React.createElement(
            \'span\',
            _extends({}, elementProps[\'span\'], { className: \'hljs-title\' }),
            \'function\'
          )
        ),
        \'() \',
        \"{\",
        React.createElement(\'br\', elementProps[\'br\']),
        \"  \",
        \'ENV=\',
        React.createElement(
          \'span\',
          _extends({}, elementProps[\'span\'], { className: \'hljs-string\' }),
          \'\"foo_bar\"\'
        ),
        React.createElement(\'br\', elementProps[\'br\']),
        \"}\",
        React.createElement(\'br\', elementProps[\'br\'])
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Test Document</h1>
      <p {...elementProps[\'p\']}>[[toc]]</p>
      <h2 {...elementProps[\'h2\']}>Basic Markdown Template</h2>
      <p {...elementProps[\'p\']}>This is a basic Markdown template, with no interpolations going on.</p>
      <p {...elementProps[\'p\']}>This should be</p>
      <ul {...elementProps[\'ul\']}>
        <li {...elementProps[\'li\']}>easy and;</li>
        <li {...elementProps[\'li\']}>predictable!</li>
      </ul>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with no interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">npm install -g yarn<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY=blah<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s a paragraph with a simple interpolation</h2>
      <p {...elementProps[\'p\']}>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2 {...elementProps[\'h2\']}>Here\'s a code snippet with a simple interpolation</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\"><span {...elementProps[\'span\']} className=\"hljs-keyword\">function</span> <span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}RUBY={props.rubycontent}<br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted code snippet</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}><span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> quick brown fox jumps over <span {...elementProps[\'span\']} className=\"hljs-keyword\">the</span> lazy dog<br {...elementProps[\'br\']} /></code></pre>
      <h2 {...elementProps[\'h2\']}>Here\'s an unhinted snippet with no discernible language</h2>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']}>)<span {...elementProps[\'span\']} className=\"hljs-comment\">()</span><span {...elementProps[\'span\']} className=\"hljs-comment\">(()</span>)<br {...elementProps[\'br\']} /></code></pre>
      <pre {...elementProps[\'pre\']}><code {...elementProps[\'code\']} className=\"language-bash\">brew tap buildkite/buildkite<br {...elementProps[\'br\']} />brew install --token=<span {...elementProps[\'span\']} className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br {...elementProps[\'br\']} />{\"\\n\"}<span {...elementProps[\'span\']} className=\"hljs-function\"><span {...elementProps[\'span\']} className=\"hljs-title\">function</span></span>() {\"{\"}<br {...elementProps[\'br\']} />{\"  \"}ENV=<span {...elementProps[\'span\']} className=\"hljs-string\">\"foo_bar\"</span><br {...elementProps[\'br\']} />{\"}\"}<br {...elementProps[\'br\']} /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This is a \',
      React.createElement(
        \'em\',
        elementProps[\'em\'],
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        elementProps[\'strong\'],
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        _extends({}, elementProps[\'svg\'], { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' }),
        React.createElement(\'path\', _extends({}, elementProps[\'path\'], { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' }))
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with imports and interpolations</h1>
      <p {...elementProps[\'p\']}>This is a <em {...elementProps[\'em\']}>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p {...elementProps[\'p\']}>We\'re importing foo, which is {foo}.</p>
      <p {...elementProps[\'p\']}>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p {...elementProps[\'p\']}>Another cool thing you can do is use JSX <strong {...elementProps[\'strong\']}>directly</strong> - here’s an SVG element, used inline: { <svg {...elementProps[\'svg\']} style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path {...elementProps[\'path\']} fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      elementProps[\'h1\'],
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <h1 {...elementProps[\'h1\']}>Markdown template with static attributes</h1>
      <p {...elementProps[\'p\']}>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 4 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style,
      elementProps = props.elementProps;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'p\',
      elementProps[\'p\'],
      \'This file is for testing interpolation inside other elements. \',
      React.createElement(
        \'code\',
        elementProps[\'code\'],
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
  "defaultProps",
]
`;

exports[`Webpack loader with a webpack config object of \`{"passElementProps":true}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object,
  elementProps: React.PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

function MarkdownComponent(props) {
  const {className, style, elementProps} = props;

  return (
    <div className={className} style={style}>
      <p {...elementProps[\'p\']}>This file is for testing interpolation inside other elements. <code {...elementProps[\'code\']}>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 0 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"h1\",
      null,
      \"Test Document\"
    ),
    React.createElement(
      \"p\",
      null,
      \"[[toc]]\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Basic Markdown Template\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This is a basic Markdown template, with no interpolations going on.\"
    ),
    React.createElement(
      \"p\",
      null,
      \"This should be\"
    ),
    React.createElement(
      \"ul\",
      null,
      React.createElement(
        \"li\",
        null,
        \"easy and;\"
      ),
      React.createElement(
        \"li\",
        null,
        \"predictable!\"
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with no interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"npm install -g yarn\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with things which shouldn\'t be treated as interpolations\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=blah\",
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a paragraph with a simple interpolation\"
    ),
    React.createElement(
      \"p\",
      null,
      \"There are \",
      Object.keys(props).length,
      \" props being supplied to this component.\"
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s a code snippet with a simple interpolation\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"function\"
        ),
        \" \",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"rbenv\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"RUBY=\",
        props.rubycontent,
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted code snippet\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" quick brown fox jumps over \",
        React.createElement(
          \"span\",
          { className: \"hljs-keyword\" },
          \"the\"
        ),
        \" lazy dog\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"h2\",
      null,
      \"Here\'s an unhinted snippet with no discernible language\"
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        null,
        \")\",
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"()\"
        ),
        React.createElement(
          \"span\",
          { className: \"hljs-comment\" },
          \"(()\"
        ),
        \")\",
        React.createElement(\"br\", null)
      )
    ),
    React.createElement(
      \"pre\",
      null,
      React.createElement(
        \"code\",
        { className: \"language-bash\" },
        \"brew tap buildkite/buildkite\",
        React.createElement(\"br\", null),
        \"brew install --token=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\'\",
          props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\',
          \"\'\"
        ),
        \" buildkite-agent\",
        React.createElement(\"br\", null),
        \"\\n\",
        React.createElement(
          \"span\",
          { className: \"hljs-function\" },
          React.createElement(
            \"span\",
            { className: \"hljs-title\" },
            \"function\"
          )
        ),
        \"() \",
        \"{\",
        React.createElement(\"br\", null),
        \"  \",
        \"ENV=\",
        React.createElement(
          \"span\",
          { className: \"hljs-string\" },
          \"\\\"foo_bar\\\"\"
        ),
        React.createElement(\"br\", null),
        \"}\",
        React.createElement(\"br\", null)
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 0 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here\'s a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a code snippet with things which shouldn\'t be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here\'s a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash">
      <span
        className="hljs-keyword">
        function
      </span>
       
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          rbenv
        </span>
      </span>
      () 
      {
      <br />
        
      RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword">
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword">
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here\'s an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment">
        ()
      </span>
      <span
        className="hljs-comment">
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash">
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string">
        \'
        INSERT-YOUR-AGENT-TOKEN-HERE
        \'
      </span>
       buildkite-agent
      <br />
      
      
      <span
        className="hljs-function">
        <span
          className="hljs-title">
          function
        </span>
      </span>
      () 
      {
      <br />
        
      ENV=
      <span
        className="hljs-string">
        \"foo_bar\"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 0 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 0 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Test Document</h1>
      <p>[[toc]]</p>
      <h2>Basic Markdown Template</h2>
      <p>This is a basic Markdown template, with no interpolations going on.</p>
      <p>This should be</p>
      <ul>
        <li>easy and;</li>
        <li>predictable!</li>
      </ul>
      <h2>Here\'s a code snippet with no interpolations</h2>
      <pre><code className=\"language-bash\">npm install -g yarn<br /></code></pre>
      <h2>Here\'s a code snippet with things which shouldn\'t be treated as interpolations</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY=blah<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s a paragraph with a simple interpolation</h2>
      <p>There are {Object.keys(props).length} props being supplied to this component.</p>
      <h2>Here\'s a code snippet with a simple interpolation</h2>
      <pre><code className=\"language-bash\"><span className=\"hljs-keyword\">function</span> <span className=\"hljs-function\"><span className=\"hljs-title\">rbenv</span></span>() {\"{\"}<br />{\"  \"}RUBY={props.rubycontent}<br />{\"}\"}<br /></code></pre>
      <h2>Here\'s an unhinted code snippet</h2>
      <pre><code><span className=\"hljs-keyword\">the</span> quick brown fox jumps over <span className=\"hljs-keyword\">the</span> lazy dog<br /></code></pre>
      <h2>Here\'s an unhinted snippet with no discernible language</h2>
      <pre><code>)<span className=\"hljs-comment\">()</span><span className=\"hljs-comment\">(()</span>)<br /></code></pre>
      <pre><code className=\"language-bash\">brew tap buildkite/buildkite<br />brew install --token=<span className=\"hljs-string\">\'{props.token || \'INSERT-YOUR-AGENT-TOKEN-HERE\'}\'</span> buildkite-agent<br />{\"\\n\"}<span className=\"hljs-function\"><span className=\"hljs-title\">function</span></span>() {\"{\"}<br />{\"  \"}ENV=<span className=\"hljs-string\">\"foo_bar\"</span><br />{\"}\"}<br /></code></pre>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 1 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Module generated from Markdown by markdown-component-loader v0.0.5


var _foo = require(\'foo\');

var _foo2 = _interopRequireDefault(_foo);

var _package = require(\'../package.json\');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with imports and interpolations\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This is a \',
      React.createElement(
        \'em\',
        null,
        \'Markdown Component\'
      ),
      \' file. Here you can include JSX-style assignment expressions; this component was generated using version \',
      _package.version,
      \' of \',
      _package.name,
      \'!\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re importing foo, which is \',
      _foo2.default,
      \'.\'
    ),
    React.createElement(
      \'p\',
      null,
      \'We\\\'re also adding a react component here: \',
      React.createElement(_foo2.default, _extends({}, _package.bugs, { style: { foo: \'bar\' } }))
    ),
    React.createElement(
      \'p\',
      null,
      \'Another cool thing you can do is use JSX \',
      React.createElement(
        \'strong\',
        null,
        \'directly\'
      ),
      \' - here\\u2019s an SVG element, used inline: \',
      React.createElement(
        \'svg\',
        { style: { display: \'inline\', height: \'1em\' }, viewBox: \'0 0 304 290\' },
        React.createElement(\'path\', { fill: \'none\', stroke: \'currentColor\', strokeWidth: \'16\', d: \'M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\' })
      ),
      \'.\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 1 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with imports and interpolations
  </h1>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    0.0.5
     of 
    markdown-component-loader
    !
  </p>
  <p>
    We\'re importing foo, which is 
    bar
    .
  </p>
  <p>
    We\'re also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/ticky/markdown-component-loader/issues" />
  </p>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - here’s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290">
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16" />
    </svg>
    .
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 1 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 1 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5
import foo from \'foo\';
import Bar from \'foo\';
import { bugs, name, version } from \'../package.json\';

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with imports and interpolations</h1>
      <p>This is a <em>Markdown Component</em> file. Here you can include JSX-style assignment expressions; this component was generated using version { version } of { name }!</p>
      <p>We\'re importing foo, which is {foo}.</p>
      <p>We\'re also adding a react component here: {<Bar {...bugs} style={{ foo: \'bar\' }} />}</p>
      <p>Another cool thing you can do is use JSX <strong>directly</strong> - here’s an SVG element, used inline: { <svg style={{ display: \'inline\', height: \'1em\' }} viewBox=\"0 0 304 290\"><path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"16\" d=\"M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z\" /></svg> }.</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 2 compiles with Babel without issue 1`] = `
"\'use strict\';

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [\'foo\', \'bar\'];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \'div\',
    { className: className, style: style },
    React.createElement(
      \'h1\',
      null,
      \'Markdown template with static attributes\'
    ),
    React.createElement(
      \'p\',
      null,
      \'This file includes some custom static attributes which should be reflected fine on the resultant object\'
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 2 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <h1>
    Markdown template with static attributes
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 2 renders as expected within React 2`] = `
Array [
  "propTypes",
  "title",
  "myArray",
  "anObject",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 2 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

MarkdownComponent[\'title\'] = \'a custom title\';

MarkdownComponent[\'myArray\'] = [
  \'foo\',
  \'bar\'
];

MarkdownComponent[\'anObject\'] = {
  \'foo\': \'bar\'
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <h1>Markdown template with static attributes</h1>
      <p>This file includes some custom static attributes which should be reflected fine on the resultant object</p>
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 3 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(\"div\", { className: className, style: style });
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 3 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined} />
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 3 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 3 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      {/* no input given */}
    </div>
  );
};

export default MarkdownComponent;
"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 4 compiles with Babel without issue 1`] = `
"\"use strict\";

Object.defineProperty(exports, \"__esModule\", {
  value: true
});
// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  var className = props.className,
      style = props.style;


  return React.createElement(
    \"div\",
    { className: className, style: style },
    React.createElement(
      \"p\",
      null,
      \"This file is for testing interpolation inside other elements. \",
      React.createElement(
        \"code\",
        null,
        \"foo bar\"
      )
    )
  );
};

exports.default = MarkdownComponent;"
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 4 renders as expected within React 1`] = `
<div
  className={undefined}
  style={undefined}>
  <p>
    This file is for testing interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 4 renders as expected within React 2`] = `
Array [
  "propTypes",
]
`;

exports[`Webpack loader with a webpack config object of \`{}\` for component example 4 returns an expected React module 1`] = `
"// Module generated from Markdown by markdown-component-loader v0.0.5

MarkdownComponent.propTypes = {
  className: React.PropTypes.string,
  style: React.PropTypes.object
};

function MarkdownComponent(props) {
  const {className, style} = props;

  return (
    <div className={className} style={style}>
      <p>This file is for testing interpolation inside other elements. <code>{ \"foo bar\" }</code></p>
    </div>
  );
};

export default MarkdownComponent;
"
`;
